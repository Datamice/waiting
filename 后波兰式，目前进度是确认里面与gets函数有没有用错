#include <stdio.h>
#include <stdlib.h>
#define Maxsize 1000
/*中缀表达式向后缀表达式转换
（1）从左向右依次取得数据ch。

（2）如果ch是操作数，直接输出。

（3）如果ch是运算符（含左右括号），则：
a：如果ch = '('，放入堆栈。
b：如果ch = ')'，依次输出堆栈中的运算符，直到遇到'('为止。
c：如果ch不是')'或者'('，那么就和堆栈顶点位置的运算符top做优先级比较。
1：如果ch优先级比top高，那么将ch放入堆栈。
2：如果ch优先级低于或者等于top，那么输出top，然后将ch放入堆栈。

（4）如果表达式已经读取完成，而堆栈中还有运算符时，依次由顶端输出。

如果我们有表达式(A-B)*C+D-E/F，要翻译成后缀表达式，并且把后缀表达式存储在一个名叫output的字符串中，可以用下面的步骤。

（1）读取'('，压入堆栈，output为空
（2）读取A，是运算数，直接输出到output字符串，output = A
（3）读取'-'，此时栈里面只有一个'('，因此将'-'压入栈，output = A
（4）读取B，是运算数，直接输出到output字符串，output = AB
（5）读取')'，这时候依次输出栈里面的运算符'-'，然后就是'('，直接弹出，output = AB-
（6）读取'*'，是运算符，由于此时栈为空，因此直接压入栈，output = AB-
（7）读取C，是运算数，直接输出到output字符串，output = AB-C
（8）读取'+'，是运算符，它的优先级比'*'低，那么弹出'*'，压入'+"，output = AB-C*
（9）读取D，是运算数，直接输出到output字符串，output = AB-C*D
（10）读取'-'，是运算符，和'+'的优先级一样，因此弹出'+'，然后压入'-'，output = AB-C*D+
（11）读取E，是运算数，直接输出到output字符串，output = AB-C*D+E
（12）读取'/'，是运算符，比'-'的优先级高，因此压入栈，output = AB-C*D+E
（13）读取F，是运算数，直接输出到output字符串，output = AB-C*D+EF
（14）原始字符串已经读取完毕，将栈里面剩余的运算符依次弹出，output = AB-C*D+EF/-
*/
typedef struct Stack
{
  char a[Maxsize];
  int top;
}Stack;//简便的创建两个数组来放数据



void Push(Stack *S,char x)
{
    S->a[++(S->top)]=x;
}

char Pop(Stack *S )
{   char x='-1';
    if(S->top!=-1)
        x=S->a[(S->top)--];
    return x;
}
//第一步，创建一个表达式字符串

char* exp()
{
    char exp[Maxsize];
    gets(exp);

    return exp;
}

//第二步，从左向右读数据，读到“/0”停止，这是一个循环条件。并放入不同的堆栈里，但在第二步里有几个小步会用到
//2.1  判断数字型字符与非数字型字符,非数字型里四则运算及括号的特殊处理
//2.2  如果是数字型，转换成数据型， 如果是运算符号，要进行运算
//2.2.1  进行运算分四种case，这个过程又涉及pop和push操作
//先做后波兰式输入,返回储存结构的堆栈里 不做计算，计算这个read 返回值 应该是int

Stack* Read(Stack *S1,Stack *S2,char *exp)//S1是放结果的，S2是运算符操作， 打算强制比较，需要里面有多重判断，时间复杂
{   char x=*exp;
    while(x!='/0')
    {
        if(x!='+'&&x!='('&&x!='/'&&x!='*'&&x!='-'&&x!=')')
            {Push(S1,x);
            exp++;}
        else if(x=='(')
            Push(S2,x);
        else if(x==')')
            {
                while(S2->a[S2->top]!='(')
                {char y =Pop(S2);
                 Push(S1,y);
                 Push(S2,x);}
            }
        else if(x=='+')//对于加号， 碰到堆栈顶为+ 或-为同级，需要弹出然后push,碰到* /就直接入S2
        {
            if(S2->a[S2->top]=='-'||S2->a[S2->top]=='+')
                {char y=Pop(S2);
                Push(S1,y);
                Push(S2,x);}
             else
                Push(S2,x);
        }
         else if(x=='-')//对于负号， 碰到堆栈顶为+ 或-为同级，需要弹出然后push
        {
            if(S2->a[S2->top]=='-'||S2->a[S2->top]=='+')
                {char y=Pop(&S2);
                Push(S1,y);
                Push(S2,x);}
            else
                Push(S2,x);
        }
         else if(x=='*')//对于*， 碰到堆栈顶为+ 或-为高级，直接push，碰到/要pop再push
        {
            if(S2->a[S2->top]=='-'||S2->a[S2->top]=='+')
                Push(S2,x);
            else
                {char y=Pop(S2);
                Push(S1,y);
                Push(S2,x);}
        }

         else//对于*， 碰到堆栈顶为+ 或-为高级，直接push，碰到/要pop再push
        {
            if(S2->a[S2->top]=='-'||S2->a[S2->top]=='+')
                Push(S2,x);
            else
                {char y=Pop(S2);
                Push(S1,y);
                Push(S2,x);}
        }
        x=*(++exp);
    }
    return S1;
}



int main()
{   Stack S1,S2;
    S1.top=-1;
    S2.top=-1;

    char* a=exp();

    Stack *S=Read(&S1,&S2,a);

    for(;S->top!=-1;)
    {
        printf("%c",S->a[S->top]);
        (S->top)--;}
}


